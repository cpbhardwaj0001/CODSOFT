import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import json

class Task:
    def __init__(self, description, due_date=None):
        self.description = description
        self.due_date = due_date

    def __str__(self):
        if self.due_date:
            return f"{self.description} (Due: {self.due_date.strftime('%Y-%m-%d')})"
        else:
            return self.description

class ToDoListApp:
    def __init__(self, master):
        self.master = master
        self.master.title("To-Do List App")

        self.tasks = []
        self.load_tasks_from_file("tasks.json")

        self.create_widgets()

    def create_widgets(self):
        self.frame = ttk.Frame(self.master, padding="10")
        self.frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.task_entry_label = ttk.Label(self.frame, text="Task:")
        self.task_entry_label.grid(row=0, column=0, pady=5, sticky=tk.W)

        self.task_entry = ttk.Entry(self.frame)
        self.task_entry.grid(row=0, column=1, pady=5, padx=(0, 10), sticky=tk.W+tk.E)

        self.due_date_label = ttk.Label(self.frame, text="Due Date (YYYY-MM-DD):")
        self.due_date_label.grid(row=0, column=2, pady=5, sticky=tk.W)

        self.due_date_entry = ttk.Entry(self.frame)
        self.due_date_entry.grid(row=0, column=3, pady=5, sticky=tk.W+tk.E)

        self.add_task_button = ttk.Button(self.frame, text="Add Task", command=self.add_task)
        self.add_task_button.grid(row=0, column=4, pady=5, padx=(10, 0), sticky=tk.W+tk.E)

        self.remove_task_button = ttk.Button(self.frame, text="Remove Task", command=self.remove_task)
        self.remove_task_button.grid(row=1, column=0, pady=5, sticky=tk.W+tk.E)

        self.show_tasks_button = ttk.Button(self.frame, text="Show Tasks", command=self.show_tasks)
        self.show_tasks_button.grid(row=1, column=1, pady=5, padx=(0, 10), sticky=tk.W+tk.E)

        self.save_tasks_button = ttk.Button(self.frame, text="Save Tasks to File", command=self.save_tasks_to_file)
        self.save_tasks_button.grid(row=1, column=2, pady=5, sticky=tk.W+tk.E)

        self.reminder_button = ttk.Button(self.frame, text="Check Reminders", command=self.check_reminders)
        self.reminder_button.grid(row=1, column=3, pady=5, padx=(10, 0), sticky=tk.W+tk.E)

        self.tasks_tree = ttk.Treeview(self.frame, columns=("Description", "Due Date"), show="headings")
        self.tasks_tree.heading("Description", text="Description")
        self.tasks_tree.heading("Due Date", text="Due Date")
        self.tasks_tree.column("Description", width=200)
        self.tasks_tree.column("Due Date", width=100)
        self.tasks_tree.grid(row=2, column=0, columnspan=5, pady=10, sticky=(tk.W, tk.E))

        self.populate_tasks_tree()

    def add_task(self):
        description = self.task_entry.get()
        due_date_str = self.due_date_entry.get()

        if due_date_str:
            try:
                due_date = datetime.strptime(due_date_str, '%Y-%m-%d')
                task = Task(description, due_date)
            except ValueError:
                messagebox.showerror("Error", "Invalid date format. Please use YYYY-MM-DD.")
                return
        else:
            task = Task(description)

        self.tasks.append(task)
        messagebox.showinfo("Task Added", f"Task '{description}' added to the list.")
        self.populate_tasks_tree()
        self.clear_entries()

    def remove_task(self):
        selected_item = self.tasks_tree.selection()
        if not selected_item:
            messagebox.showerror("Error", "Please select a task to remove.")
            return

        task_description = self.tasks_tree.item(selected_item, "values")[0]

        for task in self.tasks:
            if task.description == task_description:
                self.tasks.remove(task)
                messagebox.showinfo("Task Removed", f"Task '{task_description}' removed from the list.")
                self.populate_tasks_tree()
                return

    def show_tasks(self):
        task_list = "\n".join(str(task) for task in self.tasks)
        if task_list:
            messagebox.showinfo("Tasks", f"Tasks in the list:\n{task_list}")
        else:
            messagebox.showinfo("Tasks", "No tasks in the list.")

    def save_tasks_to_file(self):
        tasks_data = []
        for task in self.tasks:
            task_data = {
                "description": task.description,
                "due_date": task.due_date.strftime('%Y-%m-%d') if task.due_date else None
            }
            tasks_data.append(task_data)

        with open("tasks.json", 'w') as file:
            json.dump(tasks_data, file)

        messagebox.showinfo("Save Successful", "Tasks saved to file.")

    def load_tasks_from_file(self, filename):
        try:
            with open(filename, 'r') as file:
                tasks_data = json.load(file)
                for task_data in tasks_data:
                    due_date = datetime.strptime(task_data['due_date'], '%Y-%m-%d') if task_data['due_date'] else None
                    task = Task(task_data['description'], due_date)
                    self.tasks.append(task)
        except FileNotFoundError:
            pass

    def check_reminders(self):
        current_date = datetime.now()
        reminders = []

        for task in self.tasks:
            if task.due_date and current_date >= task.due_date:
                reminders.append(f"{task.description} (Due: {task.due_date.strftime('%Y-%m-%d')})")

        if reminders:
            reminder_message = "\n".join(reminders)
            messagebox.showinfo("Reminders", f"Tasks with overdue dates:\n{reminder_message}")
        else:
            messagebox.showinfo("Reminders", "No tasks with overdue dates.")

    def populate_tasks_tree(self):
        for item in self.tasks_tree.get_children():
            self.tasks_tree.delete(item)

        for task in self.tasks:
            values = (task.description, task.due_date.strftime('%Y-%m-%d') if task.due_date else "")
            self.tasks_tree.insert("", "end", values=values)

    def clear_entries(self):
        self.task_entry.delete(0, tk.END)
        self.due_date_entry.delete(0, tk.END)


if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
