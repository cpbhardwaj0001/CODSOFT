import tkinter as tk
from tkinter import messagebox
import pickle

class ContactManagerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Contact Manager")
        self.contacts = self.load_contacts()

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()
        self.search_var = tk.StringVar()

        self.create_widgets()

    def load_contacts(self):
        try:
            with open('contacts.pkl', 'rb') as file:
                return pickle.load(file)
        except FileNotFoundError:
            return {}

    def save_contacts(self):
        with open('contacts.pkl', 'wb') as file:
            pickle.dump(self.contacts, file)

    def add_contact(self):
        name = self.name_var.get()
        phone = self.phone_var.get()
        email = self.email_var.get()
        address = self.address_var.get()
        if name and phone:
            self.contacts[name] = {'phone': phone, 'email': email, 'address': address}
            self.save_contacts()
            self.update_contact_list()
            self.clear_form()
            messagebox.showinfo("Success", "Contact added successfully!")
        else:
            messagebox.showerror("Error", "Name and phone number are required.")

    def view_contact(self, event):
        selected = self.contact_listbox.curselection()
        if selected:
            name = self.contact_listbox.get(selected[0])
            details = self.contacts[name]
            self.name_var.set(name)
            self.phone_var.set(details['phone'])
            self.email_var.set(details['email'])
            self.address_var.set(details['address'])

    def search_contact(self):
        search_term = self.search_var.get().lower()
        results = {name: details for name, details in self.contacts.items() if search_term in name.lower() or search_term in details['phone']}
        self.update_contact_list(results)

    def update_contact(self):
        name = self.name_var.get()
        if name in self.contacts:
            self.contacts[name] = {'phone': self.phone_var.get(), 'email': self.email_var.get(), 'address': self.address_var.get()}
            self.save_contacts()
            self.update_contact_list()
            self.clear_form()
            messagebox.showinfo("Success", "Contact updated successfully!")
        else:
            messagebox.showerror("Error", "Contact not found.")

    def delete_contact(self):
        name = self.name_var.get()
        if name in self.contacts:
            del self.contacts[name]
            self.save_contacts()
            self.update_contact_list()
            self.clear_form()
            messagebox.showinfo("Success", "Contact deleted successfully!")
        else:
            messagebox.showerror("Error", "Contact not found.")

    def clear_form(self):
        self.name_var.set("")
        self.phone_var.set("")
        self.email_var.set("")
        self.address_var.set("")

    def update_contact_list(self, contacts=None):
        self.contact_listbox.delete(0, tk.END)
        contacts = contacts or self.contacts
        for name in contacts:
            self.contact_listbox.insert(tk.END, name)

    def create_widgets(self):
        frame = tk.Frame(self.master, bg='lightblue')
        frame.pack(padx=10, pady=10, fill='both', expand=True)

        tk.Label(frame, text="Name", bg='lightblue').grid(row=0, column=0, padx=5, pady=5, sticky='e')
        tk.Entry(frame, textvariable=self.name_var).grid(row=0, column=1, padx=5, pady=5)

        tk.Label(frame, text="Phone", bg='lightblue').grid(row=1, column=0, padx=5, pady=5, sticky='e')
        tk.Entry(frame, textvariable=self.phone_var).grid(row=1, column=1, padx=5, pady=5)

        tk.Label(frame, text="Email", bg='lightblue').grid(row=2, column=0, padx=5, pady=5, sticky='e')
        tk.Entry(frame, textvariable=self.email_var).grid(row=2, column=1, padx=5, pady=5)

        tk.Label(frame, text="Address", bg='lightblue').grid(row=3, column=0, padx=5, pady=5, sticky='e')
        tk.Entry(frame, textvariable=self.address_var).grid(row=3, column=1, padx=5, pady=5)

        tk.Button(frame, text="Add Contact", command=self.add_contact, bg='green', fg='white').grid(row=4, column=0, padx=5, pady=5, sticky='ew')
        tk.Button(frame, text="Update Contact", command=self.update_contact, bg='blue', fg='white').grid(row=4, column=1, padx=5, pady=5, sticky='ew')
        tk.Button(frame, text="Delete Contact", command=self.delete_contact, bg='red', fg='white').grid(row=4, column=2, padx=5, pady=5, sticky='ew')
        tk.Button(frame, text="Clear", command=self.clear_form, bg='gray', fg='white').grid(row=4, column=3, padx=5, pady=5, sticky='ew')

        tk.Label(frame, text="Search", bg='lightblue').grid(row=5, column=0, padx=5, pady=5, sticky='e')
        tk.Entry(frame, textvariable=self.search_var).grid(row=5, column=1, padx=5, pady=5)
        tk.Button(frame, text="Search", command=self.search_contact, bg='purple', fg='white').grid(row=5, column=2, padx=5, pady=5, sticky='ew')

        self.contact_listbox = tk.Listbox(frame)
        self.contact_listbox.grid(row=6, column=0, columnspan=4, padx=5, pady=5, sticky='nsew')
        self.contact_listbox.bind('<<ListboxSelect>>', self.view_contact)

        frame.grid_columnconfigure(1, weight=1)
        frame.grid_rowconfigure(6, weight=1)

        self.update_contact_list()

def main():
    root = tk.Tk()
    app = ContactManagerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
